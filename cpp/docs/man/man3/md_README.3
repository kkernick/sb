.TH "md_README" 3 "SB++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_README \- SB++ 
.PP


.PP
\fRsb++\fP is a C++ implementation of SB\&. It's faster, easier to use, and more functional than the original Python implementation\&.
.SH "Building"
.PP
Run \fRmake\fP in this directory (\fRcpp\fP) to build a native-optimized binary of SB, created at \fRsb\fP\&. You can also choose between more or less optimized recipes, including:

.PP
.IP "1." 4
\fRgeneric\fP: A generic, x86 binary that can run on all machines\&. Compiles quickly\&.
.IP "2." 4
\fRcpp\fP: A ThinLTO, Native optimized binary\&. Compiles moderately fast\&.
.IP "3." 4
\fRpgo\fP: A ThinLTO+PGO optimized binary that runs all installed profiles in \fR~/\&.local/bin\fP to optimize the binary specifically for profiles in use\&. Compiles slowly; has to compile a intermediary profile for profiling\&.
.IP "4." 4
\fRbolt\fP A ThinLTO+Optimized+BOLT optimized binary\&. Very slow
.IP "5." 4
\fRbolt-pgo\fP A ThinLTO+PGO+BOLT optimized binary\&. Exceptionally slow, and often times \fIslower\fP then regular BOLT\&.
.PP

.PP
For reference, here is a example in performance between all four binaries (From \fRbenchmark\&.sh\fP, in milliseconds):

.PP
Profile   \fRdebug\fP   \fRgeneric\fP   \fRcpp\fP   \fRpgo\fP   \fRbolt\fP   \fRbolt-pgo\fP    Chromium Cold   227\&.0   224\&.3   \fB217\&.1\fP   246\&.2   220\&.0   240\&.0    Chromium Hot   4\&.0   3\&.9   \fB3\&.0\fP   3\&.1   3\&.1   3\&.5    Chromium Library   18\&.1   18\&.5   15\&.3   \fB15\&.2\fP   15\&.6   15\&.7    Chromium Update   258\&.1   258\&.6   222\&.3   \fB222\&.0\fP   224\&.0   224\&.1   

.PP
Everything after a Generic binary fell within the standard error of each profile, which means that the differences can largely be chalked up to chance\&. While you probably won't gain \fItoo\fP much off of just using an optimized, \fR-03 -march=native\fP binary in the \fRcpp\fP recipe, the \fRPKGBUILD\fP defaults to \fROptimized+BOLT\fP\&. PGO may be faster if you have a more specialized profiling suite\&.

.PP
The following dependencies are needed:

.PP
.IP "1." 4
\fRglibc\fP
.IP "2." 4
\fRfindutils\fP
.IP "3." 4
\fRwhich\fP
.IP "4." 4
\fRbubblewrap\fP
.IP "5." 4
\fRlibb2\fP
.IP "6." 4
\fRlibseccomp\fP
.PP

.PP
There are also optional runtime dependencies, guarded behind switches, that can add additional functionality:

.PP
.IP "1." 4
\fRstrace\fP: To enable the \fRerror\fP and \fRstrace\fP \fR--verbose\fP values by running the program underneath \fRstrace\fP\&.
.IP "2." 4
\fRhardened_malloc\fP: To enable the \fR--hardened-malloc\fP flag, which hardens both the application and proxy sandbox\&.
.IP "3." 4
\fRzram-generator\fP: To enable \fR--fs=zram\fP to use a compressed ram drive as the backing for profile SOFs, reducing memory usage over \fR--fs=tmp\fP and improving performance\&.
.IP "4." 4
\fRxdg-dbus-proxy\fP: To enable Flatpak emulation and Portals supports\&.
.IP "5." 4
\fRgocryptfs\fP for \fR--encrypt\fP
.IP "6." 4
\fRkdialog\fP for graphical dialogs
.IP "7." 4
\fRxorg-server-xephyr\fP for \fR--xorg\fP\&.
.PP
.SH "Installation"
.PP
If you're running an Arch-Based Distribution, you can use the PKGBUILD in this repo\&. Just run \fRmakepkg -si\fP\&. Otherwise, ensure all of the above run-time dependencies are met, and additionally install the following build-time dependencies:

.PP
.IP "1." 4
\fRlld\fP For linking\&.
.IP "2." 4
\fRclang\fP For compiling\&.
.IP "3." 4
\fRllvm\fP If you want \fRllvm-bolt\fP profiling\&.
.IP "4." 4
\fRdoxygen\fP If you want documentation\&.
.PP

.PP
Initialize the third-party submodules via \fRgit submodule init\fP and \fRgit submodule fetch\fP\&. Then, you can either choose to dynamically link against \fRlibexec\fP, or compile it in with the third-party submodule\&. If you have \fRlibexec\fP installed, run \fRmake link\fP, otherwise \fRmake cpp\fP\&. The resulting binary can then be used/installed\&.
.SH "Scripts and Services"
.PP
.IP "1." 4
\fRsb\&.conf\fP is a zram configuration\&. If you have \fRzram-generator\fP installed and want \fRsb\fP to use zram as an SOF backing, copy it to \fR/usr/lib/systemd/zram-generator\&.conf\&.d\fP
.IP "2." 4
\fRsb\&.service\fP is a user systemd service that dry runs applications tagged with \fR--dry-startup\fP\&. To use, copy it to \fR/usr/lib/systemd/user/\fP, copy \fRsb-startup\fP to the path, and enable the service\&.
.IP "3." 4
\fRsb-refresh\fP: Refresh all profile caches\&. Run after an update\&.
.IP "4." 4
\fRsb-seccomp\fP: Append new syscalls to a SECCOMP filter\&. Use in conjunction with \fR--seccomp=strace\fP\&.
.IP "5." 4
\fRsb-open\fP is a slimmed down version of \fRxdg-open\fP, and is used with the \fR--xdg-open\fP switch\&. Your mileage may vary using the real \fRxdg-open\fP\&. 
.PP
.SH "Licenses and Third-Party Libraries"
.PP
.IP "\(bu" 2
SB++ uses the \fRBS::ThreadPool\fP library, which is licensed under the MIT\&. Without a native thread pool library to compete against Python, SB++ would not be competitive in speed, and such this project would not exist without this library\&. 
.PP
.SH "Why?"
.PP
Speed was the principal reason for implementing SB in C++, and the results are to be expected from moving from Python to C++ (via \fRbenchmark\&.sh\fP):

.PP
Profile (ms)   Cold (P)   \fBCold (C)\fP   Hot (P)   Hot (C)   Libraries (P)   Libraries (C)   Caches (P)   Caches (C)    \fRChromium\fP   1350\&.0   \fB214\&.6\fP   74\&.7   \fB3\&.3\fP   310\&.7   \fB8\&.7\fP   519\&.2   \fB187\&.1\fP    \fRZed\fP   996\&.3   \fB303\&.2\fP   76\&.4   \fB3\&.6\fP   232\&.9   \fB4\&.5\fP   267\&.3   \fB68\&.4\fP    \fRObsidian\fP   1366\&.6   \fB217\&.3\fP   72\&.7   \fB3\&.9\fP   290\&.6   \fB5\&.1\fP   487\&.2   \fB155\&.2\fP    \fRFooyin\fP   5439\&.4   \fB658\&.8\fP   72\&.7   \fB3\&.1\fP   1494\&.6   \fB6\&.7\fP   2588\&.3   \fB1036\&.2\fP    \fROkular\fP   5152\&.2   \fB634\&.0\fP   73\&.3   \fB2\&.9\fP   1303\&.6   \fB9\&.1\fP   2387\&.5   \fB993\&.0\fP    \fRKeePassXC\fP   5069\&.6   \fB640\&.7\fP   73\&.0   \fB2\&.9\fP   1211\&.2   \fB9\&.1\fP   2224\&.1   \fB999\&.2\fP    \fRSyncthing\fP   161\&.7   \fB8\&.3\fP   72\&.0   \fB3\&.6\fP   111\&.5   \fB4\&.0\fP   116\&.5   \fB19\&.0\fP    \fRYarr\fP   163\&.0   \fB8\&.7\fP   72\&.1   \fB3\&.6\fP   116\&.3   \fB4\&.0\fP   121\&.6   \fB19\&.0\fP    Average   2462\&.3   \fB335\&.7\fP   83\&.8   \fB3\&.4\fP   633\&.9   \fB6\&.4\fP   1089\&.0   \fB309\&.7\fP    Speedup   \fB733%\fP   \fB2465%\fP   \fB9904%\fP   \fB352%\fP   

.PP
.IP "\(bu" 2
Cold Launch is an important metric if the startup service isn't be used, as it determines how long a program will take to launch for the first time after booting\&. Applications can benefit from the loading of other applications (One Qt application will populate the shared SOF for other Qt applications, letting it launch "warm")\&.
.IP "\(bu" 2
Hot Launch is the most important metric for SB\&. It defines how fast the program can launch with a warm SOF and both a \fRlib\&.cache\fP and \fRcmd\&.cache\fP\&. It effectively measures how quickly SB can read the \fRcmd\&.cache\fP and launch \fRbwrap\fP\&. The ideal is for this value to be zero, which would be equivalent to launching the application directly\&.
.IP "\(bu" 2
Update Libraries/Caches are important metrics for when the caches needs to be updated, particularly after an update\&. 
.PP

